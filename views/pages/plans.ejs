<!-- views/pages/plans.ejs - Fixed version without layout function -->
<!DOCTYPE html>
<html lang="en" data-theme="<%= (typeof telegramUser !== 'undefined' && telegramUser?.colorScheme) || 'light' %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Membership Plans | Crypto Membership NFT</title>
    
    <!-- Telegram Web App CSS -->
    <link rel="stylesheet" href="/css/telegram.css">
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="stylesheet" href="/css/components.css">
    
    <!-- Web3 Libraries -->
    <script src="https://cdn.ethers.io/lib/ethers-5.7.2.umd.min.js"></script>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    
    <style>
        :root {
            --tg-theme-bg-color: <%= (typeof telegramUser !== 'undefined' && telegramUser?.bg_color) || '#ffffff' %>;
            --tg-theme-text-color: <%= (typeof telegramUser !== 'undefined' && telegramUser?.text_color) || '#000000' %>;
            --tg-theme-hint-color: <%= (typeof telegramUser !== 'undefined' && telegramUser?.hint_color) || '#999999' %>;
            --tg-theme-link-color: <%= (typeof telegramUser !== 'undefined' && telegramUser?.link_color) || '#2481cc' %>;
            --tg-theme-button-color: <%= (typeof telegramUser !== 'undefined' && telegramUser?.button_color) || '#2481cc' %>;
            --tg-theme-button-text-color: <%= (typeof telegramUser !== 'undefined' && telegramUser?.button_text_color) || '#ffffff' %>;
            --tg-theme-secondary-bg-color: <%= (typeof telegramUser !== 'undefined' && telegramUser?.secondary_bg_color) || '#f1f1f1' %>;
        }
        
        body {
            background-color: var(--tg-theme-bg-color);
            color: var(--tg-theme-text-color);
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            overflow-x: hidden;
            min-height: 100vh;
            padding-bottom: 80px;
        }

        .plans-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .plans-header {
            text-align: center;
            margin-bottom: 40px;
        }

        .plans-header h1 {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 10px;
            color: var(--tg-theme-text-color);
        }

        .plans-header p {
            color: var(--tg-theme-hint-color);
            font-size: 1.1rem;
            margin-bottom: 20px;
        }

        .current-plan-badge {
            display: inline-block;
            padding: 8px 16px;
            background: var(--tg-theme-button-color);
            color: var(--tg-theme-button-text-color);
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .plans-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }

        .plan-card {
            background: var(--tg-theme-bg-color);
            border: 2px solid #e1e5e9;
            border-radius: 16px;
            padding: 24px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .plan-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            transform: scaleX(0);
            transition: transform 0.3s ease;
        }

        .plan-card:hover::before {
            transform: scaleX(1);
        }

        .plan-card.available {
            border-color: var(--tg-theme-button-color);
            box-shadow: 0 4px 20px rgba(36, 129, 204, 0.15);
        }

        .plan-card.owned {
            border-color: #28a745;
            background: linear-gradient(135deg, rgba(40, 167, 69, 0.1) 0%, rgba(32, 201, 151, 0.1) 100%);
        }

        .plan-card.locked {
            opacity: 0.6;
            border-color: #dee2e6;
            background: rgba(108, 117, 125, 0.05);
        }

        .plan-header {
            text-align: center;
            margin-bottom: 20px;
        }

        .plan-icon {
            font-size: 2.5rem;
            margin-bottom: 12px;
            display: block;
        }

        .plan-header h3 {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 4px;
            color: var(--tg-theme-text-color);
        }

        .plan-level {
            color: var(--tg-theme-hint-color);
            font-size: 0.875rem;
            font-weight: 500;
        }

        .plan-price {
            text-align: center;
            margin-bottom: 24px;
        }

        .plan-price .amount {
            font-size: 2.5rem;
            font-weight: bold;
            color: var(--tg-theme-button-color);
            display: block;
            line-height: 1;
        }

        .plan-price .currency {
            font-size: 1rem;
            color: var(--tg-theme-hint-color);
            font-weight: 500;
        }

        .plan-stats {
            display: grid;
            gap: 12px;
            margin-bottom: 24px;
            padding: 16px;
            background: var(--tg-theme-secondary-bg-color);
            border-radius: 8px;
        }

        .stat {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .stat .label {
            font-size: 0.875rem;
            color: var(--tg-theme-hint-color);
            font-weight: 500;
        }

        .stat .value {
            font-weight: 600;
            color: var(--tg-theme-text-color);
            font-size: 0.875rem;
        }

        .plan-benefits {
            margin-bottom: 24px;
        }

        .benefit {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 8px 0;
            font-size: 0.875rem;
            color: var(--tg-theme-text-color);
        }

        .benefit.premium {
            color: var(--tg-theme-button-color);
            font-weight: 500;
        }

        .plan-button {
            width: 100%;
            padding: 14px 20px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .plan-button.available {
            background: var(--tg-theme-button-color);
            color: var(--tg-theme-button-text-color);
        }

        .plan-button.available:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(36, 129, 204, 0.3);
        }

        .plan-button.owned {
            background: #28a745;
            color: white;
            cursor: default;
        }

        .plan-button.locked {
            background: #dee2e6;
            color: #6c757d;
            cursor: not-allowed;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: var(--tg-theme-bg-color);
            margin: 10% auto;
            padding: 20px;
            border-radius: 16px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #e1e5e9;
        }

        .modal-header h3 {
            margin: 0;
            color: var(--tg-theme-text-color);
        }

        .close {
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            color: var(--tg-theme-hint-color);
            transition: color 0.2s ease;
        }

        .close:hover {
            color: var(--tg-theme-text-color);
        }

        .wallet-section {
            margin: 20px 0;
            padding: 16px;
            background: var(--tg-theme-secondary-bg-color);
            border-radius: 8px;
        }

        #connectWalletBtn {
            width: 100%;
            padding: 12px 20px;
            background: var(--tg-theme-button-color);
            color: var(--tg-theme-button-text-color);
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        #connectWalletBtn:hover {
            opacity: 0.9;
        }

        #walletConnected {
            text-align: center;
            color: #28a745;
            font-weight: 500;
        }

        .modal-footer {
            margin-top: 20px;
            padding-top: 16px;
            border-top: 1px solid #e1e5e9;
        }

        #proceedBtn {
            width: 100%;
            padding: 14px 20px;
            background: var(--tg-theme-button-color);
            color: var(--tg-theme-button-text-color);
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        #proceedBtn:disabled {
            background: #dee2e6;
            color: #6c757d;
            cursor: not-allowed;
        }

        #proceedBtn:not(:disabled):hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(36, 129, 204, 0.3);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .plans-grid {
                grid-template-columns: 1fr;
                gap: 16px;
            }
            
            .plan-card {
                padding: 20px;
            }
            
            .plan-price .amount {
                font-size: 2rem;
            }
        }

        @media (max-width: 480px) {
            .plans-container {
                padding: 16px;
            }
            
            .plans-header h1 {
                font-size: 1.5rem;
            }
            
            .modal-content {
                margin: 5% auto;
                padding: 16px;
            }
        }

        /* Dark Theme */
        [data-theme="dark"] .plan-card {
            border-color: #333333;
            box-shadow: 0 2px 8px rgba(255, 255, 255, 0.05);
        }

        [data-theme="dark"] .plan-card.available {
            box-shadow: 0 4px 20px rgba(139, 180, 217, 0.15);
        }

        [data-theme="dark"] .plan-stats {
            background: #2a2a2a;
        }

        [data-theme="dark"] .modal-header {
            border-bottom-color: #333333;
        }

        [data-theme="dark"] .modal-footer {
            border-top-color: #333333;
        }

        [data-theme="dark"] .wallet-section {
            background: #2a2a2a;
        }
    </style>
</head>
<body>
    <!-- Header -->
    <%- include('../partials/header') %>
    
    <div class="plans-container">
        <div class="plans-header">
            <h1>🚀 Choose Your Plan</h1>
            <p>Select a membership plan to get started</p>
            
            <% if (typeof userMembership !== 'undefined' && userMembership) { %>
                <div class="current-plan-badge">
                    <span>Current Plan: <strong><%= userMembership.planName %></strong></span>
                </div>
            <% } %>
        </div>

        <div class="plans-grid">
            <% if (typeof plans !== 'undefined' && plans && plans.length > 0) { %>
                <% plans.forEach((plan, index) => { %>
                    <% 
                        const isOwned = userMembership && userMembership.planId >= plan.id;
                        const isAvailable = !userMembership || plan.id === userMembership.planId + 1 || plan.id === 1;
                        const isLocked = !isAvailable && !isOwned;
                    %>
                    
                    <div class="plan-card <%= isOwned ? 'owned' : '' %> <%= isAvailable ? 'available' : '' %> <%= isLocked ? 'locked' : '' %>"
                         data-plan-id="<%= plan.id %>">
                        
                        <div class="plan-header">
                            <div class="plan-icon">
                                <% if (plan.id <= 4) { %>🌟
                                <% } else if (plan.id <= 8) { %>💎
                                <% } else if (plan.id <= 12) { %>👑
                                <% } else { %>🔥<% } %>
                            </div>
                            <h3><%= plan.name %></h3>
                            <span class="plan-level">Level <%= plan.id %></span>
                        </div>

                        <div class="plan-price">
                            <span class="amount"><%= plan.priceUSDT %></span>
                            <span class="currency">USDT</span>
                        </div>

                        <div class="plan-stats">
                            <div class="stat">
                                <span class="label">Members per Cycle</span>
                                <span class="value"><%= plan.membersPerCycle %></span>
                            </div>
                            <div class="stat">
                                <span class="label">Current Cycle</span>
                                <span class="value">#<%= plan.currentCycle %></span>
                            </div>
                            <div class="stat">
                                <span class="label">Members in Cycle</span>
                                <span class="value"><%= plan.membersInCurrentCycle %>/<%= plan.membersPerCycle %></span>
                            </div>
                        </div>

                        <div class="plan-benefits">
                            <div class="benefit">✓ NFT Membership Card</div>
                            <div class="benefit">✓ Referral Commissions</div>
                            <div class="benefit">✓ Upgrade Path Available</div>
                            <% if (plan.id > 12) { %>
                                <div class="benefit premium">✓ Premium Cycle Rewards</div>
                            <% } %>
                        </div>

                        <% if (isOwned) { %>
                            <button class="plan-button owned" disabled>
                                <span>✓ Owned</span>
                            </button>
                        <% } else if (isAvailable) { %>
                            <button class="plan-button available" onclick="selectPlan(<%= plan.id %>)">
                                <% if (userMembership && plan.id > userMembership.planId) { %>
                                    Upgrade Now
                                <% } else { %>
                                    Select Plan
                                <% } %>
                            </button>
                        <% } else { %>
                            <button class="plan-button locked" disabled>
                                <span>🔒 Locked</span>
                            </button>
                        <% } %>
                    </div>
                <% }); %>
            <% } else { %>
                <!-- No plans available -->
                <div class="no-plans">
                    <div class="no-plans-icon">🎯</div>
                    <h3>No Plans Available</h3>
                    <p>Plans are currently being loaded or not available.</p>
                </div>
            <% } %>
        </div>
    </div>

    <!-- Plan Selection Modal -->
    <div id="planModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Confirm Plan Selection</h3>
                <span class="close" onclick="closePlanModal()">&times;</span>
            </div>
            <div class="modal-body">
                <div id="planDetails"></div>
                <div class="wallet-section">
                    <button id="connectWalletBtn" onclick="connectWallet()">
                        Connect Wallet
                    </button>
                    <div id="walletConnected" style="display: none;">
                        <span>Wallet: <span id="walletAddress"></span></span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button id="proceedBtn" onclick="proceedWithPlan()" disabled>
                    Proceed to Payment
                </button>
            </div>
        </div>
    </div>

    <!-- Bottom Navigation -->
    <%- include('../partials/navbar') %>

    <!-- Scripts -->
    <script src="/js/telegram.js"></script>
    <script src="/js/web3.js"></script>
    <script src="/js/wallet.js"></script>
    <script src="/js/app.js"></script>
    
    <script>
        // Initialize Telegram Web App
        if (window.Telegram?.WebApp) {
            window.Telegram.WebApp.ready();
            window.Telegram.WebApp.expand();
            
            // Set main button theme
            window.Telegram.WebApp.MainButton.setParams({
                color: '<%= (typeof telegramUser !== 'undefined' && telegramUser?.button_color) || '#2481cc' %>',
                text_color: '<%= (typeof telegramUser !== 'undefined' && telegramUser?.button_text_color) || '#ffffff' %>'
            });
        }
        
        // Pass server data to client
        window.APP_DATA = {
            user: <%- JSON.stringify((typeof user !== 'undefined' && user) || null) %>,
            telegramUser: <%- JSON.stringify((typeof telegramUser !== 'undefined' && telegramUser) || null) %>,
            contractAddress: '<%= process.env.CONTRACT_ADDRESS || '' %>',
            chainId: '<%= process.env.CHAIN_ID || '56' %>',
            rpcUrl: '<%= process.env.RPC_URL || '' %>',
            usdtAddress: '<%= process.env.USDT_CONTRACT_ADDRESS || '' %>',
            plans: <%- JSON.stringify((typeof plans !== 'undefined' && plans) || []) %>
        };

        let selectedPlan = null;
        let walletConnected = false;

        function selectPlan(planId) {
            selectedPlan = planId;
            showPlanModal(planId);
            
            // Haptic feedback
            if (window.Telegram?.WebApp?.HapticFeedback) {
                window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
            }
        }

        function showPlanModal(planId) {
            const modal = document.getElementById('planModal');
            const plan = window.APP_DATA.plans?.find(p => p.id === planId);
            
            if (plan) {
                document.getElementById('planDetails').innerHTML = `
                    <div class="selected-plan">
                        <div style="text-align: center; margin-bottom: 16px;">
                            <div style="font-size: 2rem; margin-bottom: 8px;">
                                ${plan.id <= 4 ? '🌟' : plan.id <= 8 ? '💎' : plan.id <= 12 ? '👑' : '🔥'}
                            </div>
                            <h4 style="margin: 0 0 4px 0; color: var(--tg-theme-text-color);">${plan.name} Plan</h4>
                            <p style="margin: 0 0 12px 0; color: var(--tg-theme-hint-color);">Level ${plan.id}</p>
                            <div style="font-size: 1.5rem; font-weight: bold; color: var(--tg-theme-button-color);">
                                ${plan.priceUSDT} USDT
                            </div>
                        </div>
                        <div style="background: var(--tg-theme-secondary-bg-color); padding: 12px; border-radius: 8px;">
                            <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                                <span style="color: var(--tg-theme-hint-color); font-size: 0.9rem;">Members per Cycle:</span>
                                <span style="font-weight: 500;">${plan.membersPerCycle}</span>
                            </div>
                            <div style="display: flex; justify-content: space-between;">
                                <span style="color: var(--tg-theme-hint-color); font-size: 0.9rem;">Current Progress:</span>
                                <span style="font-weight: 500;">${plan.membersInCurrentCycle || 0}/${plan.membersPerCycle}</span>
                            </div>
                        </div>
                    </div>
                `;
            }
            
            modal.style.display = 'block';
            checkWalletConnection();
        }

        function closePlanModal() {
            document.getElementById('planModal').style.display = 'none';
            selectedPlan = null;
        }

        async function connectWallet() {
            try {
                if (typeof window.ethereum !== 'undefined') {
                    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
                    if (accounts.length > 0) {
                        walletConnected = true;
                        updateWalletUI(accounts[0]);
                        
                        // Haptic feedback
                        if (window.Telegram?.WebApp?.HapticFeedback) {
                            window.Telegram.WebApp.HapticFeedback.notificationOccurred('success');
                        }
                    }
                } else {
                    // Show mobile wallet options
                    showMobileWalletOptions();
                }
            } catch (error) {
                console.error('Error connecting wallet:', error);
                if (window.Telegram?.WebApp) {
                    window.Telegram.WebApp.showAlert('Error connecting wallet: ' + error.message);
                } else {
                    alert('Error connecting wallet: ' + error.message);
                }
            }
        }

        function updateWalletUI(address) {
            document.getElementById('connectWalletBtn').style.display = 'none';
            document.getElementById('walletConnected').style.display = 'block';
            document.getElementById('walletAddress').textContent = address.substring(0, 6) + '...' + address.substring(38);
            document.getElementById('proceedBtn').disabled = false;
        }

        function checkWalletConnection() {
            if (window.ethereum && window.ethereum.selectedAddress) {
                walletConnected = true;
                updateWalletUI(window.ethereum.selectedAddress);
            }
        }

        async function proceedWithPlan() {
            if (!selectedPlan || !walletConnected) return;
            
            try {
                // Show loading
                const proceedBtn = document.getElementById('proceedBtn');
                proceedBtn.textContent = 'Processing...';
                proceedBtn.disabled = true;
                
                if (window.Telegram?.WebApp) {
                    window.Telegram.WebApp.showAlert('Preparing transaction...');
                } else {
                    alert('Preparing transaction...');
                }
                
                // Here you would call your smart contract function
                // await registerOrUpgradeMembership(selectedPlan);
                
                // For now, simulate success
                setTimeout(() => {
                    if (window.Telegram?.WebApp) {
                        window.Telegram.WebApp.showAlert('Plan selected successfully! Redirecting to payment...');
                    } else {
                        alert('Plan selected successfully! Redirecting to payment...');
                    }
                    
                    closePlanModal();
                    
                    // Redirect to payment or dashboard
                    setTimeout(() => {
                        window.location.href = '/membership/dashboard';
                    }, 2000);
                }, 2000);
                
            } catch (error) {
                console.error('Error proceeding with plan:', error);
                
                const proceedBtn = document.getElementById('proceedBtn');
                proceedBtn.textContent = 'Proceed to Payment';
                proceedBtn.disabled = false;
                
                if (window.Telegram?.WebApp) {
                    window.Telegram.WebApp.showAlert('Transaction failed. Please try again.');
                } else {
                    alert('Transaction failed. Please try again.');
                }
            }
        }

        function showMobileWalletOptions() {
            const options = `
                <div style="text-align: center; padding: 16px;">
                    <h4 style="margin-bottom: 16px;">Choose Your Wallet</h4>
                    <div style="display: flex; flex-direction: column; gap: 12px;">
                        <button onclick="connectMetaMaskMobile()" style="width: 100%; padding: 12px; background: #f6851b; color: white; border: none; border-radius: 8px; cursor: pointer;">
                            🦊 MetaMask Mobile
                        </button>
                        <button onclick="connectTrustWallet()" style="width: 100%; padding: 12px; background: #0500ff; color: white; border: none; border-radius: 8px; cursor: pointer;">
                            🛡️ Trust Wallet
                        </button>
                        <button onclick="connectWalletConnect()" style="width: 100%; padding: 12px; background: #3b99fc; color: white; border: none; border-radius: 8px; cursor: pointer;">
                            🔗 WalletConnect
                        </button>
                    </div>
                </div>
            `;
            document.getElementById('walletConnected').innerHTML = options;
            document.getElementById('walletConnected').style.display = 'block';
        }

        function connectMetaMaskMobile() {
            const deepLink = `https://metamask.app.link/dapp/${window.location.host}${window.location.pathname}`;
            window.open(deepLink, '_blank');
        }

        function connectTrustWallet() {
            const deepLink = `https://link.trustwallet.com/open_url?coin_id=20000714&url=${encodeURIComponent(window.location.href)}`;
            window.open(deepLink, '_blank');
        }

        function connectWalletConnect() {
            if (window.Telegram?.WebApp) {
                window.Telegram.WebApp.showAlert('WalletConnect integration coming soon!');
            } else {
                alert('WalletConnect integration coming soon!');
            }
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('planModal');
            if (event.target == modal) {
                closePlanModal();
            }
        }

        // Add haptic feedback to plan cards
        document.addEventListener('DOMContentLoaded', function() {
            const planCards = document.querySelectorAll('.plan-card.available');
            const buttons = document.querySelectorAll('.plan-button, .close');
            
            [...planCards, ...buttons].forEach(element => {
                element.addEventListener('click', function() {
                    if (window.Telegram?.WebApp?.HapticFeedback) {
                        window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
                    }
                });
            });
        });
    </script>
</body>
</html>