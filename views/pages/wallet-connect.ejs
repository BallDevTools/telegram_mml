<!-- views/pages/wallet-connect.ejs -->
<% layout('layouts/main') -%>

<div class="wallet-connect-page">
    <div class="connect-header">
        <div class="connect-icon">üîó</div>
        <h1>Connect Your Wallet</h1>
        <p>Connect a Web3 wallet to access your membership and start earning</p>
    </div>

    <div class="wallet-options">
        <% supportedWallets.forEach(wallet => { %>
            <div class="wallet-option" data-wallet="<%= wallet.id %>" onclick="connectWallet('<%= wallet.id %>')">
                <div class="wallet-info">
                    <div class="wallet-icon"><%= wallet.icon %></div>
                    <div class="wallet-details">
                        <h3><%= wallet.name %></h3>
                        <p><%= wallet.description %></p>
                    </div>
                </div>
                
                <div class="wallet-availability">
                    <% if (wallet.mobile) { %>
                        <span class="platform-badge mobile">üì± Mobile</span>
                    <% } %>
                    <% if (wallet.desktop) { %>
                        <span class="platform-badge desktop">üíª Desktop</span>
                    <% } %>
                </div>
                
                <div class="connect-arrow">‚Üí</div>
            </div>
        <% }); %>
    </div>

    <!-- Manual Address Input (for testing) -->
    <% if (process.env.NODE_ENV === 'development') { %>
        <div class="manual-connect">
            <h3>Development Mode</h3>
            <div class="manual-input">
                <input type="text" 
                       id="manualAddress" 
                       placeholder="Enter wallet address manually..."
                       class="address-input">
                <button onclick="connectManualAddress()" class="connect-btn">Connect</button>
            </div>
        </div>
    <% } %>

    <!-- Connection Status -->
    <div id="connectionStatus" class="connection-status" style="display: none;">
        <div class="status-content">
            <div class="status-icon">‚è≥</div>
            <div class="status-text">Connecting...</div>
        </div>
    </div>

    <!-- Help Section -->
    <div class="help-section">
        <h3>Need Help?</h3>
        <div class="help-items">
            <div class="help-item">
                <div class="help-icon">‚ùì</div>
                <div class="help-content">
                    <h4>Don't have a wallet?</h4>
                    <p>Download MetaMask or Trust Wallet from their official websites</p>
                </div>
            </div>
            
            <div class="help-item">
                <div class="help-icon">üîí</div>
                <div class="help-content">
                    <h4>Is it safe?</h4>
                    <p>We never store your private keys. Your wallet stays secure.</p>
                </div>
            </div>
            
            <div class="help-item">
                <div class="help-icon">‚õΩ</div>
                <div class="help-content">
                    <h4>Need BNB?</h4>
                    <p>You'll need a small amount of BNB for transaction fees on BSC</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Network Info -->
    <div class="network-info">
        <h3>Network Configuration</h3>
        <div class="network-details">
            <div class="network-item">
                <span class="label">Network:</span>
                <span class="value">Binance Smart Chain</span>
            </div>
            <div class="network-item">
                <span class="label">Chain ID:</span>
                <span class="value">56</span>
            </div>
            <div class="network-item">
                <span class="label">Currency:</span>
                <span class="value">BNB</span>
            </div>
            <div class="network-item">
                <span class="label">RPC URL:</span>
                <span class="value">https://bsc-dataseed.binance.org/</span>
            </div>
        </div>
    </div>
</div>

<style>
.wallet-connect-page {
    max-width: 600px;
    margin: 0 auto;
    padding: 20px;
}

.connect-header {
    text-align: center;
    margin-bottom: 40px;
}

.connect-icon {
    font-size: 4rem;
    margin-bottom: 20px;
}

.wallet-options {
    display: flex;
    flex-direction: column;
    gap: 16px;
    margin-bottom: 40px;
}

.wallet-option {
    display: flex;
    align-items: center;
    padding: 20px;
    border: 2px solid #e1e5e9;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.3s ease;
    background: var(--tg-theme-bg-color);
}

.wallet-option:hover {
    border-color: var(--tg-theme-button-color);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.wallet-info {
    display: flex;
    align-items: center;
    gap: 16px;
    flex: 1;
}

.wallet-icon {
    font-size: 2rem;
}

.wallet-details h3 {
    margin: 0 0 4px 0;
    font-size: 1.1rem;
}

.wallet-details p {
    margin: 0;
    color: var(--tg-theme-hint-color);
    font-size: 0.9rem;
}

.wallet-availability {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
}

.platform-badge {
    padding: 4px 8px;
    background: var(--tg-theme-secondary-bg-color);
    border-radius: 12px;
    font-size: 0.8rem;
    color: var(--tg-theme-text-color);
}

.connect-arrow {
    font-size: 1.2rem;
    color: var(--tg-theme-button-color);
    margin-left: 16px;
}

.manual-connect {
    margin: 40px 0;
    padding: 20px;
    background: var(--tg-theme-secondary-bg-color);
    border-radius: 12px;
    border: 2px dashed var(--tg-theme-hint-color);
}

.manual-input {
    display: flex;
    gap: 12px;
    margin-top: 12px;
}

.address-input {
    flex: 1;
    padding: 12px 16px;
    border: 1px solid var(--tg-theme-hint-color);
    border-radius: 8px;
    background: var(--tg-theme-bg-color);
    color: var(--tg-theme-text-color);
    font-family: monospace;
    font-size: 0.9rem;
}

.connect-btn {
    padding: 12px 24px;
    background: var(--tg-theme-button-color);
    color: var(--tg-theme-button-text-color);
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 500;
}

.connection-status {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 30px;
    border-radius: 12px;
    text-align: center;
    z-index: 1000;
}

.status-icon {
    font-size: 2rem;
    margin-bottom: 10px;
}

.help-section {
    margin: 40px 0;
}

.help-items {
    display: flex;
    flex-direction: column;
    gap: 20px;
    margin-top: 20px;
}

.help-item {
    display: flex;
    gap: 16px;
    padding: 16px;
    background: var(--tg-theme-secondary-bg-color);
    border-radius: 8px;
}

.help-icon {
    font-size: 1.5rem;
}

.help-content h4 {
    margin: 0 0 4px 0;
    font-size: 1rem;
}

.help-content p {
    margin: 0;
    color: var(--tg-theme-hint-color);
    font-size: 0.9rem;
}

.network-info {
    margin-top: 40px;
    padding: 20px;
    background: var(--tg-theme-secondary-bg-color);
    border-radius: 12px;
}

.network-details {
    margin-top: 16px;
}

.network-item {
    display: flex;
    justify-content: space-between;
    padding: 8px 0;
    border-bottom: 1px solid var(--tg-theme-hint-color);
}

.network-item:last-child {
    border-bottom: none;
}

.network-item .label {
    font-weight: 500;
}

.network-item .value {
    font-family: monospace;
    font-size: 0.9rem;
}

@media (max-width: 480px) {
    .wallet-option {
        flex-direction: column;
        text-align: center;
        gap: 12px;
    }
    
    .wallet-info {
        flex-direction: column;
        text-align: center;
    }
    
    .manual-input {
        flex-direction: column;
    }
}
</style>

<script>
async function connectWallet(walletType) {
    showConnectionStatus('Connecting...');
    
    try {
        let connected = false;
        
        switch (walletType) {
            case 'metamask':
                connected = await connectMetaMask();
                break;
            case 'trust':
                connected = await connectTrustWallet();
                break;
            case 'walletconnect':
                connected = await connectWalletConnect();
                break;
            case 'binance':
                connected = await connectBinanceWallet();
                break;
            default:
                throw new Error('Unsupported wallet type');
        }
        
        if (connected) {
            showConnectionStatus('Connected! Redirecting...', 'success');
            setTimeout(() => {
                window.location.href = '/wallet/dashboard';
            }, 1500);
        }
    } catch (error) {
        console.error('Connection error:', error);
        showConnectionStatus('Connection failed', 'error');
        setTimeout(hideConnectionStatus, 2000);
        
        if (window.Telegram?.WebApp) {
            window.Telegram.WebApp.showAlert(`Connection failed: ${error.message}`);
        }
    }
}

async function connectMetaMask() {
    if (typeof window.ethereum === 'undefined') {
        // Try to open MetaMask mobile deep link
        const deepLink = `https://metamask.app.link/dapp/${window.location.host}${window.location.pathname}`;
        window.open(deepLink, '_blank');
        throw new Error('MetaMask not installed');
    }
    
    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
    
    if (accounts.length === 0) {
        throw new Error('No accounts found');
    }
    
    // Check network
    const chainId = await window.ethereum.request({ method: 'eth_chainId' });
    if (chainId !== '0x38') {
        await switchToBSC();
    }
    
    return await saveWalletConnection(accounts[0]);
}

async function connectTrustWallet() {
    // Try Trust Wallet deep link
    const deepLink = `https://link.trustwallet.com/open_url?coin_id=20000714&url=${encodeURIComponent(window.location.href)}`;
    window.open(deepLink, '_blank');
    
    // For mobile, we can't directly connect like browser extension
    throw new Error('Please open this app in Trust Wallet browser');
}

async function connectWalletConnect() {
    // WalletConnect integration would go here
    throw new Error('WalletConnect integration coming soon');
}

async function connectBinanceWallet() {
    if (typeof window.BinanceChain === 'undefined') {
        throw new Error('Binance Chain Wallet not installed');
    }
    
    const accounts = await window.BinanceChain.request({ method: 'eth_requestAccounts' });
    return await saveWalletConnection(accounts[0]);
}

async function switchToBSC() {
    try {
        await window.ethereum.request({
            method: 'wallet_switchEthereumChain',
            params: [{ chainId: '0x38' }]
        });
    } catch (switchError) {
        if (switchError.code === 4902) {
            await window.ethereum.request({
                method: 'wallet_addEthereumChain',
                params: [{
                    chainId: '0x38',
                    chainName: 'Binance Smart Chain',
                    nativeCurrency: {
                        name: 'BNB',
                        symbol: 'BNB',
                        decimals: 18
                    },
                    rpcUrls: ['https://bsc-dataseed.binance.org/'],
                    blockExplorerUrls: ['https://bscscan.com/']
                }]
            });
        } else {
            throw switchError;
        }
    }
}

async function saveWalletConnection(walletAddress) {
    try {
        const response = await fetch('/wallet/api/connect', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                walletAddress: walletAddress
            })
        });
        
        const result = await response.json();
        
        if (!response.ok) {
            throw new Error(result.error || 'Connection failed');
        }
        
        return true;
    } catch (error) {
        throw error;
    }
}

async function connectManualAddress() {
    const address = document.getElementById('manualAddress').value.trim();
    
    if (!address) {
        alert('Please enter a wallet address');
        return;
    }
    
    if (!/^0x[a-fA-F0-9]{40}$/.test(address)) {
        alert('Invalid wallet address format');
        return;
    }
    
    try {
        showConnectionStatus('Connecting...');
        await saveWalletConnection(address);
        showConnectionStatus('Connected! Redirecting...', 'success');
        setTimeout(() => {
            window.location.href = '/wallet/dashboard';
        }, 1500);
    } catch (error) {
        showConnectionStatus('Connection failed', 'error');
        setTimeout(hideConnectionStatus, 2000);
        alert(`Connection failed: ${error.message}`);
    }
}

function showConnectionStatus(message, type = 'loading') {
    const statusEl = document.getElementById('connectionStatus');
    const iconEl = statusEl.querySelector('.status-icon');
    const textEl = statusEl.querySelector('.status-text');
    
    let icon = '‚è≥';
    if (type === 'success') icon = '‚úÖ';
    if (type === 'error') icon = '‚ùå';
    
    iconEl.textContent = icon;
    textEl.textContent = message;
    statusEl.style.display = 'block';
}

function hideConnectionStatus() {
    document.getElementById('connectionStatus').style.display = 'none';
}

// Add haptic feedback for wallet selection
document.querySelectorAll('.wallet-option').forEach(option => {
    option.addEventListener('click', () => {
        if (window.Telegram?.WebApp?.HapticFeedback) {
            window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
        }
    });
});
</script>