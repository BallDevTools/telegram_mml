// src/services/telegramBotService.js - Enhanced Version
const TelegramBot = require('node-telegram-bot-api');
const User = require('../models/User');
const Membership = require('../models/Membership');
const web3Service = require('./web3Service');

class TelegramBotService {
    constructor() {
        if (!process.env.TELEGRAM_BOT_TOKEN) {
            console.error('‚ùå TELEGRAM_BOT_TOKEN not found');
            return;
        }

        this.bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { 
            polling: true,
            baseApiUrl: 'https://api.telegram.org'
        });
        
        this.appUrl = process.env.APP_URL || 'https://your-app.com';
        this.botUsername = process.env.TELEGRAM_BOT_USERNAME;
        
        this.setupCommands();
        this.setupHandlers();
        this.setupErrorHandling();
        
        console.log('ü§ñ Telegram Bot Service initialized');
    }

    setupCommands() {
        // Set bot commands menu
        this.bot.setMyCommands([
            { command: 'start', description: 'üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Crypto Membership' },
            { command: 'plans', description: 'üìã ‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' },
            { command: 'dashboard', description: 'üìä ‡∏î‡∏π Dashboard ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì' },
            { command: 'wallet', description: 'üí≥ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Wallet' },
            { command: 'refer', description: 'üîó ‡∏£‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô' },
            { command: 'stats', description: 'üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö' },
            { command: 'help', description: '‚ùì ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠' },
            { command: 'support', description: 'üÜò ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô' }
        ]);
    }

    setupHandlers() {
        // /start command with referral handling
        this.bot.onText(/\/start(.*)/, this.handleStart.bind(this));
        
        // Individual commands
        this.bot.onText(/\/plans/, this.handlePlans.bind(this));
        this.bot.onText(/\/dashboard/, this.handleDashboard.bind(this));
        this.bot.onText(/\/wallet/, this.handleWallet.bind(this));
        this.bot.onText(/\/refer/, this.handleRefer.bind(this));
        this.bot.onText(/\/stats/, this.handleStats.bind(this));
        this.bot.onText(/\/help/, this.handleHelp.bind(this));
        this.bot.onText(/\/support/, this.handleSupport.bind(this));

        // Callback query handlers (for inline keyboards)
        this.bot.on('callback_query', this.handleCallbackQuery.bind(this));
        
        // Handle any message (for fallback)
        this.bot.on('message', this.handleMessage.bind(this));
    }

    setupErrorHandling() {
        this.bot.on('error', (error) => {
            console.error('‚ùå Bot Error:', error);
        });

        this.bot.on('polling_error', (error) => {
            console.error('‚ùå Polling Error:', error);
        });
    }

    // Command Handlers
    async handleStart(msg, match) {
        const chatId = msg.chat.id;
        const telegramUser = msg.from;
        const startParam = match[1].trim();
        
        try {
            // Create or update user
            let user = await this.createOrUpdateUser(telegramUser);
            
            // Handle referral
            if (startParam.startsWith('ref_')) {
                await this.handleReferralCode(user, startParam);
            }

            const keyboard = this.createStartKeyboard();
            const welcomeMessage = this.getWelcomeMessage(user);
            
            await this.bot.sendMessage(chatId, welcomeMessage, { 
                reply_markup: keyboard,
                parse_mode: 'HTML'
            });
            
        } catch (error) {
            console.error('Start command error:', error);
            await this.sendErrorMessage(chatId);
        }
    }

    async handlePlans(msg) {
        const chatId = msg.chat.id;
        const user = await this.getUser(msg.from.id);
        
        if (!user) {
            return this.bot.sendMessage(chatId, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /start ‡∏Å‡πà‡∏≠‡∏ô');
        }

        try {
            const plans = await this.getPlansData();
            const keyboard = this.createPlansKeyboard();
            
            await this.bot.sendMessage(chatId, 
                this.formatPlansMessage(plans), {
                reply_markup: keyboard,
                parse_mode: 'HTML'
            });
        } catch (error) {
            console.error('Plans command error:', error);
            await this.sendErrorMessage(chatId);
        }
    }

    async handleDashboard(msg) {
        const chatId = msg.chat.id;
        const user = await this.getUser(msg.from.id);
        
        if (!user || !user.walletAddress) {
            return this.sendWalletRequiredMessage(chatId);
        }

        try {
            const membership = await Membership.findOne({
                walletAddress: user.walletAddress,
                isActive: true
            });

            if (!membership) {
                return this.sendNoMembershipMessage(chatId);
            }

            const dashboardData = await this.getDashboardData(user);
            const keyboard = this.createDashboardKeyboard();
            
            await this.bot.sendMessage(chatId, 
                this.formatDashboardMessage(dashboardData), {
                reply_markup: keyboard,
                parse_mode: 'HTML'
            });
        } catch (error) {
            console.error('Dashboard command error:', error);
            await this.sendErrorMessage(chatId);
        }
    }

    async handleWallet(msg) {
        const chatId = msg.chat.id;
        const user = await this.getUser(msg.from.id);
        
        if (!user) {
            return this.bot.sendMessage(chatId, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /start ‡∏Å‡πà‡∏≠‡∏ô');
        }

        const keyboard = user.walletAddress ? 
            this.createWalletConnectedKeyboard() : 
            this.createWalletKeyboard();
        
        const message = user.walletAddress ?
            this.formatWalletConnectedMessage(user) :
            this.getWalletConnectMessage();

        await this.bot.sendMessage(chatId, message, {
            reply_markup: keyboard,
            parse_mode: 'HTML'
        });
    }

    async handleRefer(msg) {
        const chatId = msg.chat.id;
        const user = await this.getUser(msg.from.id);
        
        if (!user) {
            return this.bot.sendMessage(chatId, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /start ‡∏Å‡πà‡∏≠‡∏ô');
        }

        try {
            const referralData = await this.getReferralData(user);
            const referralLink = this.generateReferralLink(user);
            const keyboard = this.createReferralKeyboard(referralLink);
            
            await this.bot.sendMessage(chatId, 
                this.formatReferralMessage(referralData, referralLink), {
                reply_markup: keyboard,
                parse_mode: 'HTML'
            });
        } catch (error) {
            console.error('Refer command error:', error);
            await this.sendErrorMessage(chatId);
        }
    }

    async handleStats(msg) {
        const chatId = msg.chat.id;
        
        try {
            const systemStats = await web3Service.getSystemStats();
            const message = this.formatStatsMessage(systemStats);
            
            await this.bot.sendMessage(chatId, message, {
                parse_mode: 'HTML'
            });
        } catch (error) {
            console.error('Stats command error:', error);
            await this.sendErrorMessage(chatId);
        }
    }

    async handleHelp(msg) {
        const chatId = msg.chat.id;
        const helpMessage = this.getHelpMessage();
        const keyboard = this.createHelpKeyboard();
        
        await this.bot.sendMessage(chatId, helpMessage, {
            reply_markup: keyboard,
            parse_mode: 'HTML'
        });
    }

    async handleSupport(msg) {
        const chatId = msg.chat.id;
        const supportMessage = this.getSupportMessage();
        const keyboard = this.createSupportKeyboard();
        
        await this.bot.sendMessage(chatId, supportMessage, {
            reply_markup: keyboard,
            parse_mode: 'HTML'
        });
    }

    // Callback Query Handler
    async handleCallbackQuery(callbackQuery) {
        const msg = callbackQuery.message;
        const data = callbackQuery.data;
        const chatId = msg.chat.id;
        
        // Answer callback query to remove loading state
        await this.bot.answerCallbackQuery(callbackQuery.id);
        
        switch (data) {
            case 'open_app':
                await this.sendAppLink(chatId);
                break;
            case 'view_plans':
                await this.handlePlans(msg);
                break;
            case 'connect_wallet':
                await this.sendWalletConnectLink(chatId);
                break;
            case 'refresh_data':
                await this.handleDashboard(msg);
                break;
            case 'share_referral':
                await this.handleShareReferral(callbackQuery);
                break;
            default:
                if (data.startsWith('plan_')) {
                    await this.handlePlanSelection(callbackQuery, data);
                }
        }
    }

    // Message fallback handler
    async handleMessage(msg) {
        // Skip if it's a command
        if (msg.text && msg.text.startsWith('/')) return;
        
        const chatId = msg.chat.id;
        const user = await this.getUser(msg.from.id);
        
        if (!user) {
            await this.bot.sendMessage(chatId, 
                'üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /start ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Crypto Membership NFT'
            );
        }
    }

    // Keyboard Creators
    createStartKeyboard() {
        return {
            inline_keyboard: [
                [{ text: 'üöÄ ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏û', web_app: { url: this.appUrl } }],
                [
                    { text: 'üìã ‡∏î‡∏π‡πÅ‡∏ú‡∏ô', callback_data: 'view_plans' },
                    { text: 'üí≥ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Wallet', callback_data: 'connect_wallet' }
                ],
                [{ text: 'üîó ‡∏£‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', callback_data: 'get_referral' }]
            ]
        };
    }

    createPlansKeyboard() {
        return {
            inline_keyboard: [
                [{ text: 'üöÄ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡πÉ‡∏ô App', web_app: { url: `${this.appUrl}/membership/plans` } }],
                [{ text: 'üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å', callback_data: 'start' }]
            ]
        };
    }

    createDashboardKeyboard() {
        return {
            inline_keyboard: [
                [{ text: 'üìä ‡πÄ‡∏õ‡∏¥‡∏î Dashboard', web_app: { url: `${this.appUrl}/membership/dashboard` } }],
                [
                    { text: 'üîÑ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó', callback_data: 'refresh_data' },
                    { text: 'üîó ‡πÅ‡∏ä‡∏£‡πå', callback_data: 'share_referral' }
                ]
            ]
        };
    }

    createWalletKeyboard() {
        return {
            inline_keyboard: [
                [{ text: 'üí≥ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Wallet', web_app: { url: `${this.appUrl}/wallet/connect` } }],
                [{ text: '‚ùì ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Wallet', callback_data: 'wallet_help' }]
            ]
        };
    }

    createReferralKeyboard(referralLink) {
        return {
            inline_keyboard: [
                [{ text: 'üì§ ‡πÅ‡∏ä‡∏£‡πå‡∏•‡∏¥‡∏á‡∏Å‡πå', switch_inline_query: `üöÄ ‡∏°‡∏≤‡∏£‡πà‡∏ß‡∏° Crypto Membership NFT ‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞! ${referralLink}` }],
                [{ text: 'üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå', callback_data: 'copy_referral' }],
                [{ text: 'üìä ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', web_app: { url: `${this.appUrl}/membership/dashboard` } }]
            ]
        };
    }

    // Helper Methods
    async createOrUpdateUser(telegramUser) {
        let user = await User.findOne({ telegramId: telegramUser.id.toString() });
        
        if (!user) {
            user = new User({
                telegramId: telegramUser.id.toString(),
                firstName: telegramUser.first_name,
                lastName: telegramUser.last_name,
                username: telegramUser.username,
                languageCode: telegramUser.language_code || 'en'
            });
            await user.save();
        } else {
            user.firstName = telegramUser.first_name;
            user.lastName = telegramUser.last_name;
            user.username = telegramUser.username;
            user.lastActive = new Date();
            await user.save();
        }
        
        return user;
    }

    async getUser(telegramId) {
        return await User.findOne({ telegramId: telegramId.toString() });
    }

    generateReferralLink(user) {
        return `https://t.me/${this.botUsername}/app?startapp=ref_${user.referralCode}`;
    }

    // Message Formatters
    getWelcomeMessage(user) {
        return `üéâ <b>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Crypto Membership NFT!</b>

üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ <b>${user.firstName}</b>

üöÄ <b>‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Membership ‡πÅ‡∏ö‡∏ö Decentralized</b>

üíé <b>‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©:</b>
‚Ä¢ 16 ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏†‡∏≤‡∏û ($1 - $16)
‚Ä¢ ‡∏£‡∏±‡∏ö NFT ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö
‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ö Commission
‚Ä¢ ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°

üì± <b>‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!</b>`;
    }

    formatPlansMessage(plans) {
        let message = `üìã <b>‡πÅ‡∏ú‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</b>\n\n`;
        
        plans.slice(0, 5).forEach((plan, index) => {
            const emoji = this.getPlanEmoji(plan.id);
            message += `${emoji} <b>${plan.name}</b> - $${plan.priceUSDT} USDT\n`;
            message += `   Level ${plan.id} | Cycle: ${plan.currentCycle}\n\n`;
        });
        
        message += `üí° <i>‡∏£‡∏ß‡∏° 16 ‡∏£‡∏∞‡∏î‡∏±‡∏ö - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà $1 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!</i>`;
        return message;
    }

    getPlanEmoji(planId) {
        if (planId <= 4) return 'üåü';
        if (planId <= 8) return 'üíé';
        if (planId <= 12) return 'üëë';
        return 'üî•';
    }

    // Notification Methods
    async notifyNewReferral(userId, referralName, planName) {
        try {
            const message = `üéâ <b>‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì!</b>

üë§ <b>${referralName}</b> ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
üìã ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ã‡∏∑‡πâ‡∏≠ <b>${planName}</b> ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Commission

üí∞ <i>‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÉ‡∏ô Dashboard</i>`;

            const keyboard = {
                inline_keyboard: [
                    [{ text: 'üìä ‡∏î‡∏π Dashboard', web_app: { url: `${this.appUrl}/membership/dashboard` } }]
                ]
            };

            await this.bot.sendMessage(userId, message, {
                reply_markup: keyboard,
                parse_mode: 'HTML'
            });
        } catch (error) {
            console.error('Error sending referral notification:', error);
        }
    }

    async notifyCommissionReceived(userId, amount, fromUser, planName) {
        try {
            const message = `üí∞ <b>‡∏£‡∏±‡∏ö Commission ‡πÅ‡∏•‡πâ‡∏ß!</b>

üíµ <b>+${amount} USDT</b>
üë§ ‡∏à‡∏≤‡∏Å: <b>${fromUser}</b>
üìã ‡πÅ‡∏ú‡∏ô: <b>${planName}</b>

üéâ <i>Commission ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ Wallet ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß!</i>`;

            const keyboard = {
                inline_keyboard: [
                    [{ text: 'üí≥ ‡∏î‡∏π Wallet', web_app: { url: `${this.appUrl}/wallet/dashboard` } }]
                ]
            };

            await this.bot.sendMessage(userId, message, {
                reply_markup: keyboard,
                parse_mode: 'HTML'
            });
        } catch (error) {
            console.error('Error sending commission notification:', error);
        }
    }

    async notifyUpgradeSuccess(userId, oldPlan, newPlan) {
        try {
            const message = `üéä <b>‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</b>

‚¨ÜÔ∏è <b>${oldPlan} ‚Üí ${newPlan}</b>
üé® NFT ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å mint ‡πÅ‡∏•‡πâ‡∏ß
üí∞ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤ Commission ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô!

üöÄ <i>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà!</i>`;

            const keyboard = {
                inline_keyboard: [
                    [{ text: 'üìä ‡∏î‡∏π Dashboard', web_app: { url: `${this.appUrl}/membership/dashboard` } }]
                ]
            };

            await this.bot.sendMessage(userId, message, {
                reply_markup: keyboard,
                parse_mode: 'HTML'
            });
        } catch (error) {
            console.error('Error sending upgrade notification:', error);
        }
    }

    // Error handlers
    async sendErrorMessage(chatId) {
        await this.bot.sendMessage(chatId, 
            '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Support');
    }

    async sendWalletRequiredMessage(chatId) {
        const keyboard = {
            inline_keyboard: [
                [{ text: 'üí≥ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Wallet', web_app: { url: `${this.appUrl}/wallet/connect` } }]
            ]
        };

        await this.bot.sendMessage(chatId, 
            'üí≥ <b>‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Wallet ‡∏Å‡πà‡∏≠‡∏ô</b>\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Wallet ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ô‡∏µ‡πâ', {
            reply_markup: keyboard,
            parse_mode: 'HTML'
        });
    }

    async sendNoMembershipMessage(chatId) {
        const keyboard = {
            inline_keyboard: [
                [{ text: 'üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô', web_app: { url: `${this.appUrl}/membership/plans` } }]
            ]
        };

        await this.bot.sendMessage(chatId, 
            'üéØ <b>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏†‡∏≤‡∏û</b>\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', {
            reply_markup: keyboard,
            parse_mode: 'HTML'
        });
    }
}

module.exports = new TelegramBotService();